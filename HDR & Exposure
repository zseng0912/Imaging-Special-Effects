import cv2
import numpy as np


def adjust_exposure(image, factor):
    """
    Adjust the exposure of an image.

    :param image: Input image
    :param factor: Factor by which to adjust the exposure.
                   Factor > 1 increases exposure, Factor < 1 decreases exposure.
    :return: Exposure adjusted image
    """
    # Convert image to float32 for precise calculation
    image_float = image.astype(np.float32)

    # Adjust exposure
    adjusted_image = image_float * factor

    # Clip values to the valid range [0, 255] and convert back to uint8
    adjusted_image = np.clip(adjusted_image, 0, 255).astype(np.uint8)

    return adjusted_image


# Load an image
image = cv2.imread('image.png')

# Define exposure factors and corresponding times (in seconds)
exposure_factors = {
    'exposure_1_4_sec.jpg': (1 / 15, 1 / 4),  # 1/4 sec relative to 15 sec
    'exposure_1_sec.jpg': (1 / 4, 1),  # 1 sec relative to 15 sec
    'exposure_4_sec.jpg': (4 / 15, 4),  # 4 sec relative to 15 sec
    'exposure_15_sec.jpg': (1, 15)  # 15 sec (base exposure)
}

# Adjust exposure levels and save the images
exposure_times = []
for filename, (factor, time) in exposure_factors.items():
    adjusted_image = adjust_exposure(image, factor)
    cv2.imwrite(filename, adjusted_image)
    print(f"Exposure adjusted image saved as '{filename}'")
    exposure_times.append(time)

# Convert exposure times to float32 numpy array
exposure_times = np.array(exposure_times, dtype=np.float32)

# Load the exposure images into a list
filenames = list(exposure_factors.keys())
images = [cv2.imread(filename) for filename in filenames]

# Align images (assuming they are not perfectly aligned)
alignMTB = cv2.createAlignMTB()
alignMTB.process(images, images)

# Merge exposures to create an HDR image
merge_debevec = cv2.createMergeDebevec()
hdr = merge_debevec.process(images, times=exposure_times)

# Tonemap HDR image to obtain 8-bit image
tonemap = cv2.createTonemapReinhard(1.5, 0, 0, 0)
ldr = tonemap.process(hdr)

# Convert HDR image to 8-bit format
ldr = np.clip(ldr * 255, 0, 255).astype('uint8')

# Save the result
cv2.imwrite('hdr_result2.jpg', ldr)

print("HDR image created and saved as 'hdr_result.jpg'")

